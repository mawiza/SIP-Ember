// Generated by CoffeeScript 1.7.1
(function() {
  App.XGraphComponent = Ember.View.extend({
    editing: false,
    toggleEditing: (function() {
      if (this.graph !== null) {
        this.graph.setOptions({
          dataManipulation: this.get("editing")
        });
      }
    }).observes("editing"),
    data: null,
    graphDataSet: {
      nodes: new vis.DataSet(),
      edges: new vis.DataSet()
    },
    selected: "",
    graph: null,
    setup: function() {
      var container, data, options, _this;
      _this = this;
      container = $("<div>").appendTo(this.$())[0];
      data = this.get("graphDataSet");
      options = {
        configurePhysics: false,
        navigation: true,
        width: "100%",
        height: "600px",
        stabilize: false,
        stabilizationIterations: 1,
        dataManipulation: this.get("editing"),
        tooltip: {
          delay: 300,
          fontColor: "black",
          fontSize: 14,
          fontFace: "verdana",
          color: {
            border: "#666",
            background: "#FFFFC6"
          }
        }
      };
      this.graph = new vis.Network(container, data, options);
      this.graph.on("click", function(data) {
        var node_id;
        console.log("clicked");
        if (data.nodes.length > 0) {
          node_id = data.nodes[0];
          _this.set("selected", node_id);
          _this.get("data").nodes.forEach(function(node) {
            var id;
            if (node.id === node_id) {
              id = "#focusarea" + node.focusarea_id;
              return $(id).collapse('toggle');
            }
          });
        }
      });
      $(window).resize(function() {
        _this.graph.redraw();
      });
    },
    dataUpdates: (function() {
      var d, delEdges, delNodes, md, newEdges;
      if (this.graph === null) {
        this.setup();
      }
      md = this.get("data");
      d = this.get("graphDataSet");
      if ((d != null) && (md != null)) {
        delNodes = d.nodes.get({
          filter: function(i) {
            var yes_;
            yes_ = true;
            md.nodes.forEach(function(j) {
              if (i.id === j.id) {
                yes_ = false;
              }
            });
            return yes_;
          }
        });
        d.nodes.remove(delNodes);
        d.nodes.update(md.nodes);
        delEdges = d.edges.get({
          filter: function(i) {
            var yes_;
            yes_ = true;
            md.edges.forEach(function(j) {
              if (i.id === j.id) {
                yes_ = false;
              }
            });
            return yes_;
          }
        });
        d.edges.remove(delEdges);
        newEdges = md.edges.filter(function(edge) {
          return d.nodes.get(edge.from) !== null && d.nodes.get(edge.to) !== null;
        });
        d.edges.update(newEdges);
      }
    }).observes("data").on("didInsertElement")
  });

}).call(this);

//# sourceMappingURL=graph.map
