// Generated by CoffeeScript 1.7.1
(function() {
  describe('Themes should', function() {
    before(function() {
      return Ember.run(function() {
        App.Theme.FIXTURES = [
          {
            id: 1,
            content: "theme1",
            focusareas: [1, 2]
          }, {
            id: 2,
            content: "theme2",
            focusareas: [3, 4]
          }
        ];
        return App.Focusarea.FIXTURES = [
          {
            id: 1,
            content: "focusarea1",
            theme: 1
          }, {
            id: 2,
            content: "focusarea2",
            theme: 1
          }, {
            id: 3,
            content: "focusarea3",
            theme: 2
          }, {
            id: 4,
            content: "focusarea4",
            theme: 2
          }
        ];
      });
    });
    describe('should have a model that', function() {
      it('should have a content property', function() {
        var contentProperty;
        contentProperty = App.Theme.metaForProperty('content');
        return expect(contentProperty.type).to.equal('string');
      });
      it('should have a focusareas property', function() {
        var contentProperty;
        contentProperty = App.Theme.metaForProperty('focusareas');
        return expect(contentProperty.type).to.equal('focusarea');
      });
      return it('can be created', function() {
        visit("/themes");
        return andThen(function() {
          return Ember.run(function() {
            var store, theme;
            localStorage.clear();
            store = App.__container__.lookup("controller:themes").store;
            theme = store.createRecord("theme", {
              id: 3,
              content: 'theme content'
            });
            return expect(theme.get('content')).to.equal('theme content');
          });
        });
      });
    });
    describe('a themes page', function() {
      beforeEach(function() {
        return visit('/themes');
      });
      it('should have an add new theme button', function() {
        return findWithAssert('a.add-theme');
      });
      it('should direct to the new route when clicked', function() {
        return andThen(function() {
          click('a.add-theme');
          return expect(currentURL()).to.equal('/themes/new');
        });
      });
      return it('should have table with a header and one columns', function() {
        return andThen(function() {
          findWithAssert('table.table');
          return expect(find('table.table thead tr th').length).to.equal(1);
        });
      });
    });
    return describe('a new theme page that', function() {
      beforeEach(function() {
        return visit("/themes");
      });
      it('should have a field and a submit button', function() {
        return andThen(function() {
          return click('a.add-theme').then(function() {
            findWithAssert('form');
            findWithAssert('#content');
            return findWithAssert("button:submit");
          });
        });
      });
      it('should create a new theme entry when submit gets clicked', function() {
        return andThen(function() {
          click('a.add-theme');
          return fillIn('#content', 'theme-content1').click('button:submit').then(function() {
            return expect(currentURL()).to.equal('/themes');
          });
        });
      });
      it('should be valid', function() {
        visit("/themes/new");
        return andThen(function() {
          return fillIn('#content', '').click('button:submit').then(function() {
            return expect(currentURL()).to.equal('/themes/new');
          });
        });
      });
      it('should transition to the the themes page', function() {
        visit("/themes/new");
        return andThen(function() {
          return fillIn('#content', 'theme-content2').click('button:submit').then(function() {
            return expect(find('table.table tbody tr').length).to.equal(2);
          });
        });
      });
      return it('should have themes that each can be clicked to be edited', function() {
        visit("/themes");
        return andThen(function() {
          return findWithAssert('td.theme-content:contains("theme-content1") a');
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=themes_spec.map
