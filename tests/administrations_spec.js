// Generated by CoffeeScript 1.7.1
(function() {
  describe('Administrations should', function() {
    describe('have a model that', function() {
      it('should have a name property', function() {
        var nameProperty;
        nameProperty = App.Administration.metaForProperty('name');
        return expect(nameProperty.type).to.equal('string');
      });
      it('should have a color property', function() {
        var colorProperty;
        colorProperty = App.Administration.metaForProperty('color');
        return expect(colorProperty.type).to.equal('string');
      });
      return it('can be created', function() {
        return Ember.run(function() {
          var administration, store;
          store = App.__container__.lookup('store:main');
          administration = store.createRecord("administration", {
            name: 'TOM',
            color: '#ccc'
          });
          return administration.save().then(function() {
            return expect(administration.get('name')).to.equal('TOM');
          });
        });
      });
    });
    describe('an administration page that', function() {
      it('should have an add new administration button', function() {
        visit("/administrations");
        return andThen(function() {
          return findWithAssert('a.add-administration');
        });
      });
      it('should direct to the new route when clicked', function() {
        visit("/administrations");
        return andThen(function() {
          return click('a.add-administration').then(function() {
            return expect(currentURL()).to.equal('/administrations/new');
          });
        });
      });
      return it('should have table with a header and two columns', function() {
        visit("/administrations");
        return andThen(function() {
          findWithAssert('table.table');
          return expect(find('table.table thead tr th').length).to.equal(2);
        });
      });
    });
    describe('a new administration page that', function() {
      it('should have fields and a submit button', function() {
        visit("/administrations");
        return andThen(function() {
          return click('a.add-administration').then(function() {
            findWithAssert('form');
            findWithAssert('#name');
            findWithAssert('#color');
            findWithAssert("button.submit-button");
            return findWithAssert("button.cancel-button");
          });
        });
      });
      it('should be possible to cancel the update', function() {
        visit("/administrations");
        return andThen(function() {
          return click('a.add-administration').then(function() {
            return click('button.cancel-button').then(function() {
              return expect(currentURL()).to.equal('/administrations');
            });
          });
        });
      });
      it('should create a new administrations entry when submit gets clicked', function() {
        visit("/administrations");
        return andThen(function() {
          return click('a.add-administration').then(function() {
            return fillIn('#name', 'BOU').fillIn('#color', '#000').click('button.submit-button').then(function() {
              return expect(currentURL()).to.equal('/administrations');
            });
          });
        });
      });
      it('should be valid', function() {
        visit("/administrations/new");
        return andThen(function() {
          return fillIn('#name', '').fillIn('#color', '').click('button.submit-button').then(function() {
            return expect(currentURL()).to.equal('/administrations/new');
          });
        });
      });
      it('should transition to the the administrations page', function() {
        visit("/administrations/new");
        return andThen(function() {
          return fillIn('#name', 'OPB').fillIn('#color', '#000').click('button.submit-button').then(function() {
            return expect(find('table.table tbody tr').length).to.equal(3);
          });
        });
      });
      return it('should have administrations that each can be clicked to be edited', function() {
        visit("/administrations");
        return andThen(function() {
          return findWithAssert('td.administration-name:contains("OPB") a');
        });
      });
    });
    return describe('an edit administration page that', function() {
      it('should be accessed from the administrations page', function() {
        visit("/administrations");
        return andThen(function() {
          return click('td.administration-name:contains("OPB") a').then(function() {
            findWithAssert('form');
            findWithAssert('#name');
            findWithAssert('#color');
            findWithAssert("button.update-button");
            return findWithAssert("button.delete-button");
          });
        });
      });
      it('should be possible to update the record', function() {
        visit("/administrations");
        return andThen(function() {
          return click('td.administration-name:contains("OPB") a').then(function() {
            return fillIn('#color', '#123').click('button.update-button').then(function() {
              expect(currentURL()).to.equal('/administrations');
              return findWithAssert('td.administration-color:contains("#123")');
            });
          });
        });
      });
      it('should be possible to cancel the update', function() {
        visit("/administrations");
        return andThen(function() {
          return click('td.administration-name:contains("OPB") a').then(function() {
            return click('button.cancel-button').then(function() {
              return expect(currentURL()).to.equal('/administrations');
            });
          });
        });
      });
      return it('should be possible to delete the record', function() {
        visit("/administrations");
        return andThen(function() {
          return click('td.administration-name:contains("OPB") a').then(function() {
            return click('button.delete-button').then(function() {
              expect(currentURL()).to.equal('/administrations');
              return expect(find('table.table tbody tr').length).to.equal(2);
            });
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=administrations_spec.map
